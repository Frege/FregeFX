module fregefx.JavaFxUtils where

import frege.Prelude hiding(ListView)

import fregefx.JavaFxType
import fregefx.JavaFxAll

{- define the Java stuff inline ... this way it works for both java7/java8 -}
native module where {
    public static class FregeFX extends javafx.application.Application {
        private static Func.U<javafx.stage.Stage, Func.U<org.frege.JavaFxWorld, Short>> lambda;

        @Override
        public void start(javafx.stage.Stage primaryStage) throws Exception {
            final Lazy<javafx.stage.Stage> lazyStage= Thunk.<javafx.stage.Stage>lazy(primaryStage);
            try {
                lambda.apply(lazyStage).call().apply(Thunk.lazy(org.frege.JavaFxWorld.INSTANCE)).call();
            } catch(RuntimeException re) {
                re.printStackTrace();
                throw re;
            }
        }

        /**
         * @param callback The callback lambda that will receive the primaryStage to work on.
         */
         public static void launch(Func.U<javafx.stage.Stage, Func.U<org.frege.JavaFxWorld, Short>> callback) {
             lambda = callback;
             javafx.application.Application.launch();
         }
    
        public static javafx.scene.Parent fxml(String className, String resourceName ) {
            try {
                return javafx.fxml.FXMLLoader.load(Class.forName(className).getClass().getResource(resourceName));
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (java.io.IOException e) {
                e.printStackTrace();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            return new javafx.scene.control.Label("could not load " + resourceName);
        }
    }

    // event handling
    public static<T extends javafx.event.Event> javafx.event.EventHandler<T>
        onAction(final Func.U<T, Func.U<org.frege.JavaFxWorld, Short>> lambda) {
        return new javafx.event.EventHandler<T>() {
            @Override
            public void handle(T event) {
                Lazy<T> lazyEvent = Thunk.<T>lazy(event);
                try {
                    lambda.apply(lazyEvent).call().apply(Thunk.lazy(org.frege.JavaFxWorld.INSTANCE)).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        };
    }

    // change handling
    public static<T>  javafx.beans.value.ChangeListener<T> 
        onChange(final Func.U<T, Func.U<T, Func.U<org.frege.JavaFxWorld, Short>>> lambda) {
        return new javafx.beans.value.ChangeListener<T>() {
            @Override
            public void changed(javafx.beans.value.ObservableValue<? extends T> observable, T oldValue, T newValue) {
                try {
                    Lazy<T> alt = Thunk.<T>lazy(oldValue);
                    Lazy<T> neu = Thunk.<T>lazy(newValue);
                    lambda.apply(alt).call().apply(neu).call().apply(Thunk.lazy(org.frege.JavaFxWorld.INSTANCE)).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        };
    }

    // bridging async IO actions to JFX actions, relaying any value that was obtained in IO as pure for rendering in JFX
    public static <T> void doBridge(final Func.U<RealWorld, T> ioLambda, final Func.U<T, Func.U<org.frege.JavaFxWorld, Short>> jfxLambda) {
        try {
            final java.util.concurrent.FutureTask<Object> ioFuture =
                new java.util.concurrent.FutureTask<Object>(new java.util.concurrent.Callable<Object>() {
                    public Object call() {
                        final Lazy<T> erg = PreludeBase.TST.performUnsafe( ioLambda );
                        erg.call(); // force evaluation
                        javafx.application.Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                jfxLambda.apply(erg).call().apply(Thunk.lazy(org.frege.JavaFxWorld.INSTANCE)).call();
                            }
                        });
                        return null;
                    }
                });
            java.util.concurrent.ForkJoinPool.commonPool().execute(ioFuture);
        } catch(RuntimeException re) {
            re.printStackTrace();
            throw re;
        }
    }

    // make a function foo that takes a JFX t value and passes the t into an IO action
    // even though it must return an IO (), it must run inside the UI thread
    // foo :: JFX t -> (t -> IO ()) -> IO ()
    public static <T> void bridgeDo(final Func.U<org.frege.JavaFxWorld, T> jfxLambda, final Func.U<T, Func.U<RealWorld, Short>> ioLambda) {
        try {
            javafx.application.Platform.runLater(new Runnable() {
                @Override
                public void run() {
                    final Lazy<T> erg = jfxLambda.apply(Thunk.lazy(org.frege.JavaFxWorld.INSTANCE));
                    erg.call();

                    final java.util.concurrent.FutureTask<Object> ioFuture =
                        new java.util.concurrent.FutureTask<Object>(new java.util.concurrent.Callable<Object>() {
                            public Object call() {
                                ioLambda.apply(erg).call().apply(Thunk.lazy(frege.runtime.Phantom.theRealWorld)).call();
                                return null;
                            }
                        });
                    java.util.concurrent.ForkJoinPool.commonPool().execute(ioFuture);
                }
            });

        } catch(RuntimeException re) {
            re.printStackTrace();
            throw re;
        }
    }
}

--- The starter for every FregeFX Application
data FregeFX = mutable native javafx.application.Application where
    native launch  JavaFxUtils.FregeFX.launch :: ( Stage -> JFX () ) -> IO ()
    native fxml    JavaFxUtils.FregeFX.fxml   :: String -> String -> JFX Parent


--- Logging a message in the JFX context. For debugging/tracing purposes only
jfxlog :: String -> JFX ()
jfxlog message = if (traceLn message) then return () else return ()


bridgeAction :: ButtonBase -> IO t -> ( t -> JFX () ) -> JFX ButtonBase
bridgeAction button ioAction jfxAction = do
    button.setOnAction (onAction $ \_ -> ioAction `thenDo` jfxAction)
    pure button

actionIO_ :: ButtonBase -> IO () -> JFX ButtonBase
actionIO_ button ioAction = bridgeAction button ioAction (\_ -> return ())

--- Run any function _f_ in the JavaFX Application Thread to ensure proper painting.
--- Any code that touches a JavaFX UI component must run in this thread.
withUI :: JFX () -> JFX ()
withUI f = Platform.runLater =<< Runnable.new f

--- Given a _populate_ logic on how to build a scenegraph below the root group
--- and a _stage_, assemble the pieces and show the stage.
withStage :: (Group -> Stage -> JFX Group) -> Stage -> JFX ()
withStage populate stage = do
    content <- Group.new ()
    scene   <- Scene.new content
    stage.setScene scene
    populate content stage
    stage.show

--- Like withStage but use an AnchorPane as the root to allow resizing of the content
--- when the frame is resized. Callback function does not add to the root itself but
--- returns a the newly created content as a Node such that we can enforce Anchor constraints on it.
withResizableStage :: (Pane -> Stage -> JFX Node) -> Stage -> JFX ()
withResizableStage buildNode stage = do
    pane <- AnchorPane.new ()
    node <- buildNode pane stage
    AnchorPane.setBottomAnchor node  0.0
    AnchorPane.setLeftAnchor   node  0.0
    AnchorPane.setRightAnchor  node  0.0
    AnchorPane.setTopAnchor    node  0.0
    pane `addNode` return node
    scene <- Scene.new pane
    stage.setScene scene
    stage.show

--- JavaFX users will work with ObservableList a lot, which inherits from List.
--- The mutable java.util.List type is usually not visible in Frege but when
--- using JavaFX, having these methods accessible is convenient.
data List e = mutable native java.util.List{e} where
  native add  :: List e -> e -> JFX Bool
  native size :: List e -> JFX Int
  native remove :: List e -> e -> JFX Bool



pure native onChange  JavaFxUtils.onChange{t} :: (t -> t -> JFX ()) -> ChangeListener t

pure native onAction  JavaFxUtils.onAction{t} :: (t -> JFX () ) -> EventHandler t

native thenDo         JavaFxUtils.doBridge{t} :: IO t -> ( t -> JFX () ) -> JFX ()

native inIO           JavaFxUtils.bridgeDo{t} :: JFX t -> (t -> IO () ) -> IO ()


--- Convenience function to set an action event handler as
--- > action button $ \event -> button.OnEvent.new eventHandler setText "got it"
action :: ButtonBase -> (ActionEvent -> JFX () ) -> JFX ButtonBase
action button eventHandler = do
    button.setOnAction (onAction eventHandler)
    pure button

--- Convenience function to set an action event handler
--- that does not depend on the action event as
--- > action_ button (button.setText "got it")
action_ :: ButtonBase -> JFX () -> JFX ButtonBase
action_ button plainHandler = do
    let handler = onAction (\_ -> plainHandler)
    button.setOnAction handler
    return button

--- Convenience factory function for insets
insets :: Double -> JFX Insets
insets n = Insets.new n n n n

--- A Family type is a type that has _children_ and can attain more of them over time
class Family family where
    children :: family -> JFX (ObservableList Node)

instance Family Group where
    children group = group.getChildren

instance Family HBox where
    children hbox = hbox.getChildren

instance Family VBox where
    children vbox = vbox.getChildren

instance Family Pane where
    children pane = pane.getChildren

instance Family AnchorPane where
    children pane = pane.getChildren


--- Convenience function to add a control/pane/node to a family
add :: Family t => t -> JFX Region -> JFX t
add family builder = do
    child <- builder
    family.children >>= _.add child
    return family

infixr 3 `<:`
(<:) = add

--- Convenience function that applies _add_ to all entries in the list.
addAll :: Family family => family -> [JFX Region] -> JFX family
addAll family builders = do
    mapM (add family) builders
    return family

--- Nodes can be added just like Regions.
addNode :: Family t => t -> JFX Node -> JFX t
addNode family builder = do
    child <- builder
    family.children >>= _.add child
    return family


{--
    Unsafe, best-effort function for looking up a node in a scene.
    This returns a Node value on the Java side but in order to do
    anything sensible with this on the Frege side, we need a specialized subtype like @TextArea@.
    The function lookupNode returns such a specialized type by returning an instance of @JFX CastTarget@.
    Errors are thrown at runtime if the selector String cannot be found or yields the wrong type.
    *Use only if you are ok with runtime errors!*
-}
lookupNode :: CastTarget a => Scene -> String -> JFX a
lookupNode scene selector = do
    mayNode <- scene.lookup selector
    case mayNode of
        Just node -> downcast node >>= either
            (\cce -> error $ "cannot cast selector '" ++ selector ++ "'. Reason: " ++ show cce.getMessage)
            return
        Nothing   -> error $ "cannot find '" ++ selector ++ "'"


data ClassCastException = native java.lang.ClassCastException

-- generalized downcast
class CastTarget a where
    downcast :: Node -> JFX (ClassCastException | a)

instance CastTarget TextArea where
    native downcast "(javafx.scene.control.TextArea)" :: Node -> JFX (ClassCastException | TextArea    )

instance CastTarget (ListView t) where
    native downcast "(javafx.scene.control.ListView)" :: Node -> JFX (ClassCastException | ListView t  )
