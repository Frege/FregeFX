module fregefx.JavaFxUtils where

import frege.Prelude hiding(ListView)

import fregefx.JavaFxAll

{- define the Java stuff inline ... this way it works for both java7/java8 -}
native module where {
    public static class FregeFX extends javafx.application.Application {
        private static Func.U<javafx.stage.Stage, Func.U<RealWorld, Short>> lambda;

        @Override
        public void start(javafx.stage.Stage primaryStage) throws Exception {
            final Lazy<javafx.stage.Stage> lazyStage= Thunk.<javafx.stage.Stage>lazy(primaryStage);
            try {
                PreludeBase.TST.performUnsafe(lambda.apply(lazyStage).call()).call();
            } catch(RuntimeException re) {
                re.printStackTrace();
                throw re;
            }
        }

        /**
         * @param callback The callback lambda that will receive the primaryStage to work on.
         */
         public static void launch(Func.U<javafx.stage.Stage, Func.U<RealWorld, Short>> callback) {
             lambda = callback;
             javafx.application.Application.launch();
         }
    
        public static javafx.scene.Parent fxml(String className, String resourceName ) {
            try {
                return javafx.fxml.FXMLLoader.load(Class.forName(className).getClass().getResource(resourceName));
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (java.io.IOException e) {
                e.printStackTrace();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            return new javafx.scene.control.Label("could not load " + resourceName);
        }
    }

    // event handling
    public static<T extends javafx.event.Event> javafx.event.EventHandler<T> 
        onAction(final Func.U<T, Func.U<RealWorld, Short>> lambda) {
        return new javafx.event.EventHandler<T>() {
            @Override
            public void handle(T event) {
                Lazy<T> lazyEvent = Thunk.<T>lazy(event);
                try {
                    PreludeBase.TST.performUnsafe( lambda.apply(lazyEvent).call() ).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        };
    }

    // change handling
    public static<T>  javafx.beans.value.ChangeListener<T> 
        onChange(final Func.U<T, Func.U<T, Func.U<RealWorld, Short>>> lambda) {
        return new javafx.beans.value.ChangeListener<T>() {
            @Override
            public void changed(javafx.beans.value.ObservableValue<? extends T> observable, T oldValue, T newValue) {
                try {
                    Lazy<T> alt = Thunk.<T>lazy(oldValue);
                    Lazy<T> neu = Thunk.<T>lazy(newValue);
                    PreludeBase.TST.performUnsafe(lambda.apply(alt).call().apply(neu).call()).call();
                    // Applicable inter = lambda.apply(oldValue).apply(newValue);
                    // Delayed.forced(inter.apply(null).result().forced()); // the second argument is the IO context
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        };
    }
}

--- The starter for every FregeFX Application
data FregeFX = mutable native javafx.application.Application where
    native launch  JavaFxUtils.FregeFX.launch :: ( Stage -> IO () ) -> IO ()
    native fxml    JavaFxUtils.FregeFX.fxml   :: String -> String -> IO Parent

--- Run any function _f_ in the JavaFX Application Thread to ensure proper painting.
--- Any code that touches a JavaFX UI component must run in this thread.
withUI :: IO () -> IO ()
withUI f = Platform.runLater =<< Runnable.new f

--- Given a _populate_ logic on how to build a scenegraph below the root group
--- and a _stage_, assemble the pieces and show the stage.
withStage :: (Group -> Stage -> IO Group) -> Stage -> IO ()
withStage populate stage = do
    content <- Group.new ()
    scene   <- Scene.new content
    stage.setScene scene
    populate content stage
    stage.show

--- JavaFX users will work with ObservableList a lot, which inherits from List.
--- The mutable java.util.List type is usually not visible in Frege but when
--- using JavaFX, having these methods accessible is convenient.
data List e = mutable native java.util.List{e} where
  native add  :: List e -> e -> IO Bool
  native size :: List e -> IO Int
  native remove :: List e -> e -> IO Bool



pure native onChange  JavaFxUtils.onChange{t} :: (t -> t -> IO()) -> ChangeListener t

pure native onAction  JavaFxUtils.onAction{t} :: (t -> IO () ) -> EventHandler t


--- Convenience function to set an action event handler as
--- > action button $ \event -> button.OnEvent.new eventHandlersetText "got it"
action :: ButtonBase -> (ActionEvent -> IO () ) -> IO ButtonBase
action button eventHandler = do
    --handler <- OnEvent.new eventHandler >>= _.asEventHandler
    --button.setOnAction handler
    --return button
    button.setOnAction (onAction eventHandler)
    pure button

--- Convenience function to set an action event handler
--- that does not depend on the action event as
--- > action_ button (button.setText "got it")
action_ :: ButtonBase -> IO () -> IO ButtonBase
action_ button plainHandler = do
    let handler = onAction (\_ -> plainHandler)
    button.setOnAction handler
    return button

--- Convenience factory function for insets
insets :: Double -> IO Insets
insets n = Insets.new n n n n

--- A Family type is a type that has _children_ and can attain more of them over time
class Family family where
    children :: family -> IO (ObservableList Node)

instance Family Group where
    children group = group.getChildren

instance Family HBox where
    children hbox = hbox.getChildren

instance Family VBox where
    children hbox = hbox.getChildren

instance Family Pane where
    children hbox = hbox.getChildren


--- Convenience function to add a control/pane/node to a family
add :: Family t => t -> IO Region -> IO t
add family builder = do
    child <- builder
    family.children >>= _.add child
    return family

infixr 3 `<:`
(<:) = add

--- Convenience function that applies _add_ to all entries in the list.
addAll :: Family family => family -> [IO Region] -> IO family
addAll family builders = do
    mapM (add family) builders
    return family




{--
    Unsafe, best-effort function for looking up a node in a scene.
    This returns a Node value on the Java side but in order to do
    anything sensible with this on the Frege side, we need a specialized subtype like @TextArea@.
    The function lookupNode returns such a specialized type by returning an instance of @IO CastTarget@.
    Errors are thrown at runtime if the selector String cannot be found or yields the wrong type.
    *Use only if you are ok with runtime errors!*
-}
lookupNode :: CastTarget a => Scene -> String -> IO a
lookupNode scene selector = do
    mayNode <- scene.lookup selector
    case mayNode of
        Just node -> downcast node >>= either
            (\cce -> error $ "cannot cast selector '" ++ selector ++ "'. Reason: " ++ show cce.getMessage)
            return
        Nothing   -> error $ "cannot find '" ++ selector ++ "'"


data ClassCastException = native java.lang.ClassCastException

-- generalized downcast
class CastTarget a where
    downcast :: Node -> IO (ClassCastException | a)

instance CastTarget TextArea where
    native downcast "(javafx.scene.control.TextArea)" :: Node -> IO (ClassCastException | TextArea    )

instance CastTarget (ListView t) where
    native downcast "(javafx.scene.control.ListView)" :: Node -> IO (ClassCastException | ListView t  )
