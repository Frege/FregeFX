
plugins {
    id "com.jfrog.bintray" version "1.6"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
	publications {
		FregeFxPublication(MavenPublication) {
			from components.java
			groupId group
            artifactId 'fregefx'
            version project.version
		}
	}
}

bintray { // see https://github.com/bintray/gradle-bintray-plugin
    user = bintrayUser // from <user.home>/gradle.properties
    key = bintrayKey   // from <user.home>/gradle.properties
    publications = ['FregeFxPublication']
    pkg {
        repo = 'fregefx'
        name = 'FregeFX'
        desc = 'FregeFX - JavaFX with Frege (Haskell for the JVM)'
        //userOrg = bintrayUser
        licenses = ['BSD 3-Clause']
        vcsUrl = 'https://github.com/Frege/FregeFX.git'
        websiteUrl = 'https://github.com/Frege/FregeFX'
        issueTrackerUrl = 'https://github.com/Frege/FregeFX/issues'
        githubRepo = 'Frege/FregeFX'
        githubReleaseNotesFile = 'README.md'
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = 'FregeFX - Frege language binding for JavaFX'
            //released  = new Date() // optional; does not work atm
            vcsTag = "0.2.0"
            attributes = [:]
        }
    }
}


project.tasks.compileFrege.dependsOn(project.tasks.compileJava)

ext {
	jfxLibDir = locateJfxLibDir()
}

dependencies {
    runtime files("$jfxLibDir/jfxrt.jar") // TODO: find out why this seems to be necessary even on JDK 8
}

boolean runningOnJDK8() {
    System.getProperty('java.version')[0..2].toDouble() == 1.8
}


fregeDoc {
//    xss = "8m"
}

String locateJfxLibDir() {
    def javaFxHome = System.env['JAVAFX_HOME'] ?: ''
    def javaHome = System.env['JAVA_HOME'] ?: ''
    def jdk8 = System.getProperty('java.version')[0..2].toDouble() == 1.8

    if (! jdk8) {
        throw new GradleScriptException("Please use Java 8.", null)
    }

    def jdkHome = System.properties.'java.home' ?: ''

    def result = "$javaFxHome/rt/lib"
    if (new File("$result/jfxrt.jar").exists()) {
        logger.info "using javafx from explicit JAVAFX_HOME: $result"
        return result
    }
    result = "$jdkHome/lib/ext/"
    if (jdk8 && new File("$result/jfxrt.jar").exists()) {
        logger.info "using javafx from current java 8: $result"
        return result
    }
    result = "$javaHome/jre/lib/"
    if (new File("$result/jfxrt.jar").exists()) {
        logger.info "using javafx from explicit JAVA_HOME: $result"
        return result
    }
    result = "$javaHome/lib/"
    if (new File("$result/jfxrt.jar").exists()) {
        logger.info "using javafx from explicit JAVA_HOME: $result"
        return result
    }
    logger.error "please use a Java Version 8"
    logger.error " or set JAVA_HOME   to a dir that contains the jre/lib/jfxrt.jar"
    logger.error " or set JAVAFX_HOME to a dir that contains the rt/lib/jfxrt.jar"
    throw new GradleScriptException("location of jfxrt.jar could not be determined", null)
}
//
//fregeNativeGen {
////    typesFile = "$projectDir/src/main/resources/types.properties"
//    className = System.properties.nativeClassName //"javafx.scene.control.Button"
//    outputFile = file(System.properties.outputFile) // outputFile
//}