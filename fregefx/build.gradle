plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        FregeFxPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId group
            artifactId 'fregefx'
            version project.version
        }
    }
}

bintray { // see https://github.com/bintray/gradle-bintray-plugin
    user = project.hasProperty('bintrayUser') ? bintrayUser : "" // from <user.home>/gradle.properties
    key = project.hasProperty('bintrayKey') ? bintrayKey : ""   // from <user.home>/gradle.properties
    publications = ['FregeFxPublication']
    pkg {
        repo = 'FregeFX'
        name = 'fregefx'
        desc = 'FregeFX - JavaFX with Frege (Haskell for the JVM)'
        userOrg = "fregelang"
        licenses = ['BSD 3-Clause']
        vcsUrl = 'https://github.com/Frege/FregeFX.git'
        websiteUrl = 'https://github.com/Frege/FregeFX'
        issueTrackerUrl = 'https://github.com/Frege/FregeFX/issues'
        githubRepo = 'Frege/FregeFX'
        githubReleaseNotesFile = 'README.md'
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = 'FregeFX - Frege language binding for JavaFX'
            //released  = new Date() // optional; does not work atm
            vcsTag = project.version
            attributes = [:]
            // Optional configuration for Maven Central sync of the version
// we currently don't upload to mavenCentral as it is too cumbersome and
// jcenter is good enough to care for all artifacts.
// This way, we also get better download stats.
//            mavenCentralSync {
//                sync     = false == project.version.toString().endsWith("-SNAPSHOT") //Optional (true by default). Determines whether to sync the version to Maven Central.
//                user     = project.hasProperty('sonatypeUsername') ? sonatypeUsername : "" //OSS user token
//                password = project.hasProperty('sonatypePassword') ? sonatypePassword : "" //OSS user password
//                close    = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//            }
        }
    }
}


project.tasks.compileFrege.dependsOn(project.tasks.compileJava)

ext {
    jfxLibDir = locateJfxLibDir()
}

dependencies {
    runtime files("$jfxLibDir/jfxrt.jar") // TODO: find out why this seems to be necessary even on JDK 8
}

boolean runningOnJDK8() {
    System.getProperty('java.version')[0..2].toDouble() == 1.8
}


fregeDoc {
//    xss = "8m"
}

String locateJfxLibDir() {
    def javaFxHome = System.env['JAVAFX_HOME'] ?: ''
    def javaHome = System.env['JAVA_HOME'] ?: ''
    def jdk8 = System.getProperty('java.version')[0..2].toDouble() == 1.8

// we should run with Java 8 but compile with Java 7 atm.
//    if (!jdk8) {
//        throw new GradleScriptException("Please use Java 8.", null)
//    }

    def jdkHome = System.properties.'java.home' ?: ''

    def result = "$javaFxHome/rt/lib"
    if (new File("$result/jfxrt.jar").exists()) {
        println "using javafx from explicit JAVAFX_HOME: $result"
        return result
    }
    result = "$jdkHome/lib/ext/"
    if (jdk8 && new File("$result/jfxrt.jar").exists()) {
        println "using javafx from current java 8: $result"
        return result
    }
    result = "$javaHome/jre/lib/"
    if (new File("$result/jfxrt.jar").exists()) {
        println "using javafx from explicit JAVA_HOME: $result"
        return result
    }
    result = "$javaHome/lib/"
    if (new File("$result/jfxrt.jar").exists()) {
        println "using javafx from explicit JAVA_HOME: $result"
        return result
    }
    logger.error "please use a Java Version 8"
    logger.error " or set JAVA_HOME   to a dir that contains the jre/lib/jfxrt.jar"
    logger.error " or set JAVAFX_HOME to a dir that contains the rt/lib/jfxrt.jar"
    throw new GradleScriptException("location of jfxrt.jar could not be determined", null)
}
//
//fregeNativeGen {
////    typesFile = "$projectDir/src/main/resources/types.properties"
//    className = System.properties.nativeClassName //"javafx.scene.control.Button"
//    outputFile = file(System.properties.outputFile) // outputFile
//}