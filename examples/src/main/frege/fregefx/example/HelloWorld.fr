{--
	A simple example of a JavaFX UI with Frege:
	a group with a vbox of two buttons plus simple onAction handlers.
	UI construction follows a _builder_ style approach,
	i.e. the implementation details of how to add sub nodes to a parent is hidden
	but the containment structure is visible in the code layout.
-}
module fregefx.example.HelloWorld where

import frege.Prelude hiding(ListView)
import fregefx.JavaFxType 
import fregefx.JavaFxAll
import fregefx.JavaFxUtils

import Control.Concurrent

main args = do
    FregeFX.launch $ withStage buildUI -- runs in UI Thread

buildUI :: Family a => a -> Stage -> JFX a
buildUI root stage = do
    stage.setTitle "FregeFX Hello World"
    root <: do
        vbox <- VBox.new 5d :: JFX VBox
        vbox.setPadding =<< insets 10
        vbox <: do
            button <- Button.new "Please click me for JFX action"
            button `action_` (button.setText "Thanks!") -- IO forbidden by type
        vbox <: do
            button <- Button.new "Print current thread to console"
            button `actionIO_`  do       -- JFX change forbidden by type
                thread <- Thread.current()
                name   <- thread.getName
                println $ "thread is " ++ name
        vbox <: do
            button <- Button.new "Bridge from async IO to JFX inside UI thread"
            bridgeAction button (Thread.current() >>= _.getName) button.setText
        vbox <: do
            button <- Button.new "Async action can only be IO"
            button `actionIO_` do
                async do -- this is async inside async, but who cares
                    println "printed outside UI thread"
                return ()
        vbox <: do
            button <- Button.new "Async plus wait for completion"
            button `actionIO_` do
                mResult <- MVar.newEmpty            -- for thread coordination
                async do
                    println "printed outside UI thread"
                    mResult.put "done"
                mResult.take
                println "waited for completion, proceed in UI thread"
        -- experiment that dynamically adds 5 buttons
        vbox `addAll` map (Button.new . ("Button "++) . show) [1..5]


